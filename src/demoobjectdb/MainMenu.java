package demoobjectdb;
import javax.persistence.*;
import java.util.*;

public class MainMenu extends javax.swing.JFrame {

    /**
     * Creates new form MainMenu
     */
    public MainMenu() {
        initComponents();
        setLocationRelativeTo(null);
    }
    
    EntityManagerFactory factory = Persistence.createEntityManagerFactory("$objectdb/db/store.odb");
    EntityManager gestor = factory.createEntityManager();
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addClient = new javax.swing.JButton();
        deleteClient = new javax.swing.JButton();
        addEmployee = new javax.swing.JButton();
        deleteEmployee = new javax.swing.JButton();
        regSale = new javax.swing.JButton();
        regPurchase = new javax.swing.JButton();
        llstClients = new javax.swing.JButton();
        listEmployee = new javax.swing.JButton();
        listSale = new javax.swing.JButton();
        listPurchase = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        queryArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        addClient.setText("Agregar Cliente");
        addClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addClientActionPerformed(evt);
            }
        });

        deleteClient.setText("Eliminar cliente");
        deleteClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClientActionPerformed(evt);
            }
        });

        addEmployee.setText("Agregar empleado");
        addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeActionPerformed(evt);
            }
        });

        deleteEmployee.setText("Eliminar empleado");
        deleteEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeActionPerformed(evt);
            }
        });

        regSale.setText("Registrar venta");
        regSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regSaleActionPerformed(evt);
            }
        });

        regPurchase.setText("Registar compra");
        regPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                regPurchaseActionPerformed(evt);
            }
        });

        llstClients.setText("Listar clientes");
        llstClients.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                llstClientsActionPerformed(evt);
            }
        });

        listEmployee.setText("Listar Empleados");
        listEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listEmployeeActionPerformed(evt);
            }
        });

        listSale.setText("Listar ventas");
        listSale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listSaleActionPerformed(evt);
            }
        });

        listPurchase.setText("Listar compras");
        listPurchase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listPurchaseActionPerformed(evt);
            }
        });

        queryArea.setColumns(20);
        queryArea.setRows(5);
        jScrollPane1.setViewportView(queryArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(regSale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(deleteClient, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(regPurchase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(listSale, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(listPurchase, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                            .addComponent(llstClients, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(listEmployee, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addClient)
                    .addComponent(deleteClient)
                    .addComponent(llstClients))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEmployee)
                    .addComponent(deleteEmployee)
                    .addComponent(listEmployee))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(regSale)
                    .addComponent(regPurchase)
                    .addComponent(listSale)
                    .addComponent(listPurchase))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listPurchaseActionPerformed
        queryArea.setText(null);
        gestor.getTransaction().begin(); //Inicia la transaccion.
        TypedQuery<Purchase> consulta = gestor.createQuery("SELECT i FROM Purchase i", Purchase.class);
        List<Purchase> resultados = consulta.getResultList();
        gestor.getTransaction().commit();
        
        String textoFinal = "ID | Costo | Fecha de compra | Condicion\n";
        textoFinal += "---------------------------------------------------------\n";
        
        for (int i = 0 ; i < resultados.size() ; i++)
        {
            String compra = resultados.get(i).toString();
            textoFinal += compra;
        }
        
        queryArea.setText(textoFinal);
    }//GEN-LAST:event_listPurchaseActionPerformed

    private void addClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addClientActionPerformed
        AddClient addCl = new AddClient();
        addCl.setVisible(true);
    }//GEN-LAST:event_addClientActionPerformed

    private void deleteClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClientActionPerformed
        DeleteClient deleteCl = new DeleteClient();
        deleteCl.setVisible(true);
    }//GEN-LAST:event_deleteClientActionPerformed

    private void addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeActionPerformed
        AddEmployee addEmp = new AddEmployee();
        addEmp.setVisible(true);
    }//GEN-LAST:event_addEmployeeActionPerformed

    private void deleteEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeActionPerformed
        DeleteEmployee deleteEmp = new DeleteEmployee();
        deleteEmp.setVisible(true);
    }//GEN-LAST:event_deleteEmployeeActionPerformed

    private void regSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regSaleActionPerformed
        AddSale addSl = new AddSale();
        addSl.setVisible(true);
    }//GEN-LAST:event_regSaleActionPerformed

    private void regPurchaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_regPurchaseActionPerformed
        AddPurchase addPur = new AddPurchase();
        addPur.setVisible(true);
    }//GEN-LAST:event_regPurchaseActionPerformed

    private void llstClientsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_llstClientsActionPerformed
        queryArea.setText(null);
        gestor.getTransaction().begin(); //Inicia la transaccion.
        TypedQuery<Client> consulta = gestor.createQuery("SELECT i FROM Client i", Client.class);
        List<Client> resultados = consulta.getResultList();
        gestor.getTransaction().commit();
        
        String textoFinal = "ID | Nombre completo | Direccion | Telefono\n";
        textoFinal += "-----------------------------------------------------------\n";
        
        for (int i = 0 ; i < resultados.size() ; i++)
        {
            String cliente = resultados.get(i).toString();
            textoFinal += cliente;
        }
        
        queryArea.setText(textoFinal);
    }//GEN-LAST:event_llstClientsActionPerformed

    private void listEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listEmployeeActionPerformed
        queryArea.setText(null);
        gestor.getTransaction().begin(); //Inicia la transaccion.
        TypedQuery<Employee> consulta = gestor.createQuery("SELECT i FROM Employee i", Employee.class);
        List<Employee> resultados = consulta.getResultList();
        gestor.getTransaction().commit();
        
        String textoFinal = "ID | Nombre completo | Fecha Nacimiento | Oficina | Telefono | Salario \n";
        textoFinal += "-----------------------------------------------------------------------------------------------\n";
        
        for (int i = 0 ; i < resultados.size() ; i++)
        {
            String empleado = resultados.get(i).toString();
            textoFinal += empleado;
        }
        
        queryArea.setText(textoFinal);
    }//GEN-LAST:event_listEmployeeActionPerformed

    private void listSaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listSaleActionPerformed
        queryArea.setText(null);
        gestor.getTransaction().begin(); //Inicia la transaccion.
        TypedQuery<Sale> consulta = gestor.createQuery("SELECT i FROM Sale i", Sale.class);
        List<Sale> resultados = consulta.getResultList();
        gestor.getTransaction().commit();
        
        String textoFinal = "ID | Precio (Con Tax) | Fecha de venta \n";
        textoFinal += "---------------------------------------------------\n";
        
        for (int i = 0 ; i < resultados.size() ; i++)
        {
            String venta = resultados.get(i).toString();
            textoFinal += venta;
        }
        
        queryArea.setText(textoFinal);
    }//GEN-LAST:event_listSaleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainMenu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addClient;
    private javax.swing.JButton addEmployee;
    private javax.swing.JButton deleteClient;
    private javax.swing.JButton deleteEmployee;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listEmployee;
    private javax.swing.JButton listPurchase;
    private javax.swing.JButton listSale;
    private javax.swing.JButton llstClients;
    private javax.swing.JTextArea queryArea;
    private javax.swing.JButton regPurchase;
    private javax.swing.JButton regSale;
    // End of variables declaration//GEN-END:variables
}
